@page "/chat/{roomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using ChatApp.Client.Models;
@using ChatApp.Client.ViewModel;
@using ChatApp.Shared;
@using ChatApp.Shared.Models;
@using Oniqys.Blazor.ViewModel;
@using Oniqys.Blazor.Controls;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ChatViewModel ViewModel

@attribute [Authorize]
@implements IDisposable
@implements Chat.IPresenter

<style type="text/css">
    .layout {
        display: grid;
        height: calc(100vh - 100px);
        grid-template-columns: 1fr auto;
        grid-template-rows: calc(100vh - 150px) 50px; /* adjustment */
    }

    .content {
        grid-column: 1;
        grid-row: 1;
        overflow-y: auto;
    }

    .righttab {
        grid-column: 2;
        grid-row: 1;
        overflow-y: auto;
        margin-right: 10px;
        max-width: 350px;
        background-color: #090040;
    }

    .input {
        grid-column: 1;
        grid-row: 2;
    }

    .margin {
        margin: 8px;
    }

    .margin-left {
        margin-left: 8px;
    }

    .inputbox {
        height: 48px;
    }

    .header {
        height: 48px;
    }
</style>

<div class="layout">
    <AuthorizeView>
        <Authorized>
            <div class="righttab">
                <button class="col-md-auto margin btn btn-primary btn-sm" @onclick="(() => ViewModel.OpenUserList())">
                    <span class="oi oi-chat" aria-hidden="true"></span>
                </button>
                @if (ViewModel.IsOpenedUserList)
                {
                    <RoomUserList DataContext="ViewModel.UserList" />
                }
                else if (ViewModel.CurrentThreadId != Guid.Empty && ViewModel.CurrentThread != null)
                {
                    <div class="margin">
                        <PostItem Message="@ViewModel.CurrentThread.ParentMessage" />
                    </div>
                    <ThreadView DataContext="ViewModel.CurrentThread" />
                }
            </div>
            <div class="content margin-left">
                @foreach (var poster in ViewModel.ThreadPosters)
                {
                    <div id="@poster.ParentMessage.Id" class="margin">
                        <span>
                            <PostItem Message="@poster.ParentMessage">
                                <button class="col-md-auto margin btn btn-primary btn-sm" @onclick="(() => ViewModel.OpenInnerThread(poster))">
                                    <span class="oi oi-document" aria-hidden="true"></span>
                                </button>
                                <button class="col-md-auto margin btn btn-primary btn-sm" @onclick="(() => ViewModel.OpenThread(poster.ParentMessage.Id))">
                                    <span class="oi oi-arrow-right" aria-hidden="true"></span>
                                </button>
                            </PostItem>
                        </span>
                    </div>
                    if (poster.ThreadOpend)
                    {
                        <ThreadView DataContext="poster" />
                    }
                }
            </div>
            <MessageInput DataContext="@ViewModel.MessagePoster" />
            <AnchorNavigation />
        </Authorized>
    </AuthorizeView>
</div>

@code {

    public record UserInfo
    {
        public string Id { get; init; }

        public string Name { get; init; }
    }

    #region Chat.IPresenter

    public interface IPresenter
    {
        void NavigateToLast();

        void SetFocus(string elementId);
    }

    public void SetFocus(string elementId) => ViewModel.NextFocusElementId = elementId;

    #endregion

    private string _fragment;

    private Task _roomIdChanging = Task.CompletedTask;

    private Guid _roomId;

    [Parameter]
    public Guid RoomId
    {
        get => _roomId;
        set
        {
            if (_roomId == value)
                return;

            _roomId = value;
            _roomIdChanging = ViewModel?.InitializeAsync(this, value) ?? Task.CompletedTask;
            StateHasChanged();
        }
    }

    private IndexViewModel _indexViewModel;

    [CascadingParameter]
    public IndexViewModel indexViewModel
    {
        get => _indexViewModel;
        set
        {
            if (_indexViewModel != value)
            {
                _indexViewModel = value;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ViewModel.PropertyChanged += (s, e) => StateHasChanged();
        ViewModel.MessagePoster.PropertyChanged += (s, e) => StateHasChanged();
        await ViewModel.InitializeAsync(this, _roomId);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _fragment = null;
        await ViewModel.InitializeAsync(this as IPresenter, _roomId);

        if (string.IsNullOrEmpty(_fragment))
            await ViewModel.RefreshAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        NavigateToLast();
        if (!string.IsNullOrEmpty(ViewModel.NextFocusElementId))
        {
            await Focus(ViewModel.NextFocusElementId);
            ViewModel.NextFocusElementId = null;
        }
    }

    /// <summary>
    /// 最後のアンカーにスクロールするためにナビゲーションします。ただし、全ての描画が終わっている必要があります。
    /// </summary>
    public void NavigateToLast()
    {
        var count = ViewModel.ThreadPosters.Count;
        if (count == 0)
            return;

        var message = ViewModel.ThreadPosters[count - 1].ParentMessage;

        var url = NavigationManager.Uri.Split("#");
        if (url.Length == 1 || url.Length >= 2 && Guid.TryParse(url[1], out var lastMessageId) && lastMessageId != message.Id)
        {
            if (url.Length >= 2)
                _fragment = url[1];

            NavigationManager.NavigateTo($"{url[0]}#{message.Id}", true);
        }
    }

    public async Task Focus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("focusElement", elementId);
    }

    public void Dispose()
    {
    }
}